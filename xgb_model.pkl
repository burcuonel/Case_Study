{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dd364af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest MAE: 1.05 Â°C\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost â MAE: 1.17 Â°C | RMSE: 1.56 Â°C | RÂ²: 0.588\n",
      "Random Forest Prediction: 22.56 Â°C\n",
      "XGBoost Prediction: 23.23 Â°C\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\Burcu\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:492: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "# --- 1. Veri yÃ¼kleme ---\n",
    "df = pd.read_excel(\"final_result_data2.xlsx\")\n",
    "df[\"Hour\"] = pd.to_datetime(df[\"Hour\"], errors=\"coerce\")\n",
    "\n",
    "# --- 2. Feature seÃ§imi ---\n",
    "# Ortalama wall temp (hedef)\n",
    "wall_cols = [c for c in df.columns if \"wall\" in c.lower() and \"temperature\" in c.lower() and \"radiator\" not in c.lower()]\n",
    "df[\"WallTemp_Avg\"] = df[wall_cols].apply(pd.to_numeric, errors=\"coerce\").mean(axis=1)\n",
    "\n",
    "# Ortalama radiator temp\n",
    "rad_cols = [c for c in df.columns if \"radiator temperature\" in c.lower()]\n",
    "df[\"RadTemp_Avg\"] = df[rad_cols].apply(pd.to_numeric, errors=\"coerce\").mean(axis=1)\n",
    "\n",
    "# Occupancy (yÃ¼zde olmayan kolon)\n",
    "occ_cols = [c for c in df.columns if \"occupancy\" in c.lower() and \"%\" not in c]\n",
    "df[\"Occupancy\"] = df[occ_cols].apply(pd.to_numeric, errors=\"coerce\").mean(axis=1)\n",
    "\n",
    "# Zaman bazlÄ± Ã¶zellikler\n",
    "df[\"hour\"] = df[\"Hour\"].dt.hour\n",
    "df[\"weekday\"] = df[\"Hour\"].dt.weekday\n",
    "\n",
    "# DÄ±Å hava (roof temperature varsa)\n",
    "roof_cols = [c for c in df.columns if \"roof\" in c.lower() and \"temperature\" in c.lower()]\n",
    "if roof_cols:\n",
    "    df[\"RoofTemp\"] = df[roof_cols].apply(pd.to_numeric, errors=\"coerce\").mean(axis=1)\n",
    "else:\n",
    "    df[\"RoofTemp\"] = None\n",
    "\n",
    "# --- 3. Temizleme ---\n",
    "df = df.dropna(subset=[\"WallTemp_Avg\", \"RadTemp_Avg\", \"Occupancy\", \"hour\", \"weekday\"])\n",
    "\n",
    "# --- 4. Model ---\n",
    "X = df[[\"Occupancy\", \"RadTemp_Avg\", \"RoofTemp\", \"hour\", \"weekday\"]]\n",
    "y = df[\"WallTemp_Avg\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "\n",
    "# --- 6. XGBoost (DÃ¼zeltilmiÅ) ---\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "# XGBoost 2.0+ iÃ§in dÃ¼zeltilmiÅ model tanÄ±mÄ±\n",
    "xgb_model = XGBRegressor(\n",
    "    n_estimators=1200,\n",
    "    learning_rate=0.03,\n",
    "    max_depth=6,\n",
    "    subsample=0.9,\n",
    "    colsample_bytree=0.9,\n",
    "    reg_lambda=1.0,\n",
    "    random_state=42,\n",
    "    n_jobs=-1\n",
    ")\n",
    "\n",
    "# Model eÄitme (XGBoost 2.0+ iÃ§in dÃ¼zeltilmiÅ)\n",
    "xgb_model.fit(\n",
    "    X_train, y_train,\n",
    "    eval_set=[(X_test, y_test)],\n",
    "    verbose=False\n",
    ")\n",
    "\n",
    "# Tahmin ve metrikler\n",
    "pred_xgb = xgb_model.predict(X_test)\n",
    "mae_xgb = mean_absolute_error(y_test, pred_xgb)\n",
    "rmse_xgb = mean_squared_error(y_test, pred_xgb, squared=False)\n",
    "r2_xgb = r2_score(y_test, pred_xgb)\n",
    "\n",
    "print(f\"XGBoost â MAE: {mae_xgb:.2f} Â°C | RMSE: {rmse_xgb:.2f} Â°C | RÂ²: {r2_xgb:.3f}\")\n",
    "\n",
    "# --- 7. Ãrnek kullanÄ±m ---\n",
    "# 30 kiÅi, radyatÃ¶r 55Â°C, dÄ±Å hava 8Â°C, saat 10, ÃarÅamba (2)\n",
    "example = pd.DataFrame({\n",
    "    \"Occupancy\": [30],\n",
    "    \"RadTemp_Avg\": [55],\n",
    "    \"RoofTemp\": [8],\n",
    "    \"hour\": [10],\n",
    "    \"weekday\": [2]\n",
    "})\n",
    "\n",
    "print(f\"Random Forest Prediction: {model.predict(example)[0]:.2f} Â°C\")\n",
    "print(f\"XGBoost Prediction: {xgb_model.predict(example)[0]:.2f} Â°C\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
